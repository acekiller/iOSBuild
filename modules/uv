###########################################################################
#  Change values here                                                     #
#                                                                         #
MODEL="libuv"                                                             #
VERSION="0.11.14"                                                         #
SRCURL="https://github.com/joyent/libuv/archive/v${VERSION}.tar.gz"       #
#                                                                         #
###########################################################################

module_arch_build()
{
    target=$1
    platform=$2

    INSTALLPATH="${BUILD_ROOT_PATH}/${platform}-${target}.sdk"
    mkdir -p "${INSTALLPATH}"
    case $target in
        arm64|\
        armv7|\
        armv7s|\
        x86_64|\
        i386)
            DEV_PATH="$XCODE_PATH/Toolchains/XcodeDefault.xctoolchain"
            SDK_PATH="$XCODE_PATH/Platforms/${platform}.platform/Developer/SDKs/${platform}${iOS_SDK}.sdk"
            ;;
        *)
            echo "Unknown Architecture $ARCH"
            exit 1
            ;;
    esac
 
    export CC="${DEV_PATH}/usr/bin/clang"
    export CPP="${DEV_PATH}/usr/bin/cpp"
    export AR="${DEV_PATH}/usr/bin/ar"
    export RANLIB="${DEV_PATH}/usr/bin/ranlib"
    export CFLAGS="-O3 -Wall -arch ${target} -isysroot ${SDK_PATH} -miphoneos-version-min=${iOS_SDK_MIN}"
    export CPPFLAGS="-I${INSTALLPATH}/include"
    export LDFLAGS="-L${INSTALLPATH}/lib -L${SDK_PATH}/usr/lib -L${SDK_PATH}/usr/lib/system"
    export LIBS=""
 
    
    ./autogen.sh
    ./configure --prefix="${INSTALLPATH}" --host=arm-darwin\
                --enable-static \
                --disable-shared \
                --with-sysroot="${SDK_PATH}"
    make 
    make install
    make clean
    
    unset CC
    unset CPP
    unset AR
    unset RANLIB
    unset CFLAGS
    unset CPPFALGS
    unset LDFLAGS
    unset LIBS    
}
  
module_lib_create()
{
    libs=$1
    mkdir -p ${CURRENTPATH}/lib
    for lib_name in ${libs}; do
        lipo -create \
            ${BUILD_ROOT_PATH}/iPhoneSimulator-x86_64.sdk/lib/lib${lib_name}.a \
            ${BUILD_ROOT_PATH}/iPhoneSimulator-i386.sdk/lib/lib${lib_name}.a \
            ${BUILD_ROOT_PATH}/iPhoneOS-arm64.sdk/lib/lib${lib_name}.a \
            ${BUILD_ROOT_PATH}/iPhoneOS-armv7s.sdk/lib/lib${lib_name}.a \
            ${BUILD_ROOT_PATH}/iPhoneOS-armv7.sdk/lib/lib${lib_name}.a \
            -output ${CURRENTPATH}/lib/lib${lib_name}.a
    done
}

module_inc_copy()
{
    includes=$1
    for inc in ${includes}; do
        cp -R ${BUILD_ROOT_PATH}/iPhoneSimulator-i386.sdk/include/${inc} ${CURRENTPATH}/include
    done
}

module_download()
{
   cib_download_and_extract $SRCURL $MODEL-$VERSION.tar.gz
}

module_building()
{
    echo "Build library..."
    module_arch_build arm64 iPhoneOS
    module_arch_build armv7 iPhoneOS
    module_arch_build armv7s iPhoneOS
    module_arch_build i386 iPhoneSimulator
    module_arch_build x86_64 iPhoneSimulator
    module_lib_create "uv"
    module_inc_copy "uv.h uv-unix.h uv-errno.h uv-darwin.h"
    echo "Building done." 
}

